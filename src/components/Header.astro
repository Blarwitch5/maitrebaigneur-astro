---
import SideNav from "@components/SideNav.astro";
import ToggleBtn from "@components/header/ToggleBtn.astro";
import Brand from "@components/header/Brand.astro";
import Buttons from "@components/ui/Buttons.astro";

import site from "@assets/data/data.json";

const { siteLinks } = site;
const nav = siteLinks.primary;
---

<header id="header" class="header">
	<nav class="navbar">
		<!-- Logo -->
		<Brand />
		<!-- Navigation menu -->
		<ul class="navbar-nav" role="navigation" aria-label="Barre de menu">
			<!-- Navigation links -->
			{
				nav.map((item) => (
					<li role="none" class={`nav-item ${item.responsive}`}>
						<Buttons href={item.href} class={`nav-link ${item.classes}`} role="menuitem">
							{item.name}
						</Buttons>
					</li>
				))
			}
			<!-- menu button -->
			<li role="none" class="nav-item nav-item--icon">
				<ToggleBtn />
			</li>
		</ul>
	</nav>
</header>
<!-- Side menu -->
<SideNav />

<style lang="scss">
	header {
		position: fixed;
		top: 0;
		left: 0px;
		width: 100%;
		z-index: 99;
		opacity: 1;
		visibility: visible;
		transition: all 0.3s ease-in-out;
		max-height: 80px;

		&*a {
			text-decoration: none;
		}

		&.active {
			.navbar {
				background-color: var(--color-white);
				color: var(--color-primary);

				border-radius: 100vw;
				box-shadow: 0 10px 15px -3px hsla(var(--link-color-primary-hsl), 0.3), 0 4px 6px -4px hsla(var(--link-color-primary-hsl), 0.3);

				.navbar-nav {
					padding: 0.5rem;
					color: var(--color-primary);

					& * {
						color: inherit;
					}
				}
			}
		}
	}
	.navbar {
		margin-top: 1rem;
		margin-inline: 2rem;
		padding-inline: 2rem;
		display: flex;
		justify-content: space-between;
		align-items: center;
		color: var(--color-white);

		@media screen and (max-width: 992px) {
			padding-inline: 0;
		}
		@media screen and (max-width: 768px) {
			margin-inline: 1rem;
		}

		.navbar-nav {
			display: flex;
			list-style-type: none;
			align-items: center;
			gap: 1rem;
			padding: 0;
			margin: 0;
			color: var(--color-white);

			& * {
				color: inherit;
			}
		}
	}
</style>
<script scoped>
	const menu = document.querySelector(".navbar-nav");
	const menuItems = menu.querySelectorAll(".nav-item");

	menu.addEventListener("keydown", (event) => {
		// Check if the user pressed the up or down arrow key
		if (event.keyCode === 38 || event.keyCode === 40) {
			// Get the currently selected menu item
			let current = menu.querySelector(".nav-item.active");

			// Check if the user pressed the up arrow key
			if (event.keyCode === 38) {
				// If the user pressed the up arrow key, select the previous menu item
				current = current.previousElementSibling || menuItems[menuItems.length - 1];
			} else {
				// If the user pressed the down arrow key, select the next menu item
				current = current.nextElementSibling || menuItems[0];
			}

			// Deselect the currently active menu item
			menu.querySelector(".nav-item.active").classList.remove("active");
			// Select the new menu item
			current.classList.add("active");
		}
	});

	// Select the first menu item when the menu is first focused
	menu.addEventListener("focus", (event) => {
		menuItems[0].classList.add("active");
	});
</script>
