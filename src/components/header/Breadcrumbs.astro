---
interface BreadcrumbsProps {
	indexText?: string;
	mainClass?: string;
}

interface BreadcrumbItem {
	text: string;
	href: string;
	"aria-current"?: any;
}

const { indexText = "accueil", mainClass = "breadcrumbs" } = Astro.props as BreadcrumbsProps;

const paths = Astro.url.pathname.split("/").filter((crumb: any) => crumb);
const ariaCurrent = new URL(Astro.request.url).pathname === "/" ? "page" : undefined;

console.log(paths);

/**
 * Array of breadcrumb items.
 * The first item is the index page.
 */
let parts: Array<BreadcrumbItem> = [
	{
		text: indexText,
		href: "/",
		"aria-current": ariaCurrent,
	},
];

/**
 * Loop through the paths and create a breadcrumb item for each.
 */
paths.forEach((text: string, index: number) => {
	const href = `/${paths.slice(0, index + 1).join("/")}`;

	parts = [
		...parts,
		{
			text: text.replace(/[-_]/g, " "),
			href,
			"aria-current": ariaCurrent,
		},
	];
});
---

<nav aria-label="Fil d'Arianne" class={mainClass}>
	<ol class={`${mainClass}-items`}>
		{
			parts.map(({ text, ...attrs }, index, array) => (
				<li class={`${mainClass}-item`}>
					{Astro.slots.has("index") && index === 0 && (
						<a {...attrs} class={`${mainClass}-link`}>
							<slot name="index" />
						</a>
					)}

					{(!Astro.slots.has("index") || (Astro.slots.has("index") && index !== 0)) && (
						<a {...attrs} class={`${mainClass}-link`}>
							{text}
						</a>
					)}

					{Astro.slots.has("separator") && array.length - 1 !== index && <slot name="separator" />}
				</li>
			))
		}
	</ol>
</nav>

<style lang="scss">
	.breadcrumbs {
		color: var(--color-white);

		&-items {
			display: flex;
			flex-wrap: wrap;
			padding: 0;
			margin: 0;
			list-style: none;
		}
		&-item {
			font-weight: 200;

			&:last-child {
				a {
					text-decoration: none;
					font-weight: bold;
				}
			}
		}
		&-link {
			color: inherit;
			font-size: 0.9em;
		}
	}
</style>
<script>
	const list = document.querySelector(".breadcrumbs-items"); //select the list
	const lastChild = list.lastElementChild; //get the last child of the list
	const firstChildOfLastChild = lastChild.firstElementChild; // get the first child of the last child
	firstChildOfLastChild.setAttribute("aria-current", "page"); // add aria-current the link of current page
</script>
