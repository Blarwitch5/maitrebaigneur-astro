---
interface InstagramPost {
  id: string;
  media_type: string;
  media_url: string;
  caption: string;
  permalink: string;
}

let instagramFeed: InstagramPost[] = [];
let error: string | null = null;

async function fetchInstagramFeed(): Promise<InstagramPost[]> {
  try {
    const accessToken = import.meta.env.INSTAGRAM_ACCESS_TOKEN;
    if (!accessToken) {
      throw new Error('Instagram access token is missing');
    }

    const response = await fetch(
      `https://graph.instagram.com/v18.0/me/media?fields=id,caption,media_type,media_url,permalink,timestamp&access_token=${accessToken}&limit=4`,
      { 
        headers: { 'Accept': 'application/json' },
        cache: 'force-cache'
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error?.message || `Instagram API error: ${response.statusText}`);
    }

    const data = await response.json();
    if (!data.data || !Array.isArray(data.data)) {
      throw new Error('Invalid response format from Instagram API');
    }
    return data.data || [];
  } catch (e) {
    console.error('Instagram feed error:', e);
    error = e instanceof Error ? e.message : 'Erreur lors du chargement du flux Instagram';
    return [];
  }
}

try {
  instagramFeed = await fetchInstagramFeed();
} catch (e) {
  error = 'Failed to load Instagram feed';
}
---

<div class="instagram-grid">
  {error && <p class="error">{error}</p>}
  
  {!error && instagramFeed.length === 0 && (
    <p>Aucune publication Instagram disponible</p>
  )}

  {instagramFeed.map((post) => (
    <a href={post.permalink} target="_blank" rel="noopener noreferrer">
      <article data-key={post.id} class="instagram-post">
        {post.media_type === "IMAGE" ? (
          <img src={post.media_url} alt={post.caption || ''} loading="lazy" />
        ) : (
          <video src={post.media_url} controls />
        )}
      </article>
    </a>
  ))}
</div>

<style lang="scss">
  .instagram-grid {
    display: grid;
    justify-content: center;
    grid-template-columns: repeat(2, 8rem);
    grid-template-rows: repeat(2, 6rem);
    grid-gap: var(--space-2xs);
    align-items: stretch;

    @media screen and (max-width: 1024px) {
      grid-template-columns: repeat(4, minmax(6rem, 1fr));
      grid-template-rows: repeat(1, minmax(8rem, 1fr));
      grid-gap: var(--space-sm);
    }
    @media screen and (max-width: 768px) {
      justify-content: center;
      grid-template-rows: repeat(1, minmax(6rem, 1fr));
      grid-gap: var(--space-2xs);
    }
    @media screen and (max-width: 576px) {
      grid-template-columns: repeat(2, minmax(6rem, 1fr));
      grid-template-rows: repeat(2, 10rem);
    }
    a,
    article {
      width: 100%;
      height: 100%;
      overflow: hidden;
      background-color: var(--color-bg-light);
      border-radius: 0.5rem;

      &::after,
      &::before {
        content: none !important;
      }
    }

    img,
    video {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 0.5rem;
    }
  }
  
  .error {
    color: var(--color-error, #dc3545);
    text-align: center;
    padding: 1rem;
  }
</style>
